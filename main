#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <math.h>
#include "affichage.h"
#include "main.h"

int aleatoire = 0;
int tabballot [17];
int tabverif[9];
int vente [12][3];
int tabjeu [24][2];
int tabdest [24][8];
int tabcompt[8] = {1,1,3,3,4,4,2,2};
int tabpalais[8] = {5,5,6,6,7,7,8,8};
int sto [3][1];
int nbtirage;
void initville ();
void remplitabballot();
int tirage();
int isvalid(int F);
void inittabverif();
void inittabballot();
void tribullealeat(int *t,int* t2);
void inittabjeu ();
void tirage1();
void affectation (int nb1, int nb2, int nb3, int nb4);
int demville [3][4]={{2,0,3,1},{3,2,1,0},{0,1,2,3}};
void demandevilles ();
void affichage_carte();
void affdemande_ville();




struct joueur {
        char *nom [15];
        int nbaction;
        int casejeu;
        int roupie;
        int palais [6];
        int jetville;
        int jetcomptoir;
        int jetclient;
        int ballot [2];

    };
typedef struct joueur S_jou;

int main() {
    //initialisation du jeu pour 4 joueurs
    S_jou tab[4];
    srand(time(NULL));//permet d'initier la fonction random
    nbjoueur(tab,4);
    inittabjeu();
    initvente();
    remplitabballot();
    tribullealeat(tabcompt, tabpalais);
    mise_en_place();
    for(int i=0;i<4;i++){
        manche(&tab);
    }
    affichage_carte();
    affdemande_ville();
    affcompt();
}
 void afaireachaquemanche (){
    for (int i=0;i<9;i++){
        tirage(tabballot);
    }
    triage(tabballot);
    tirage1 ();
 }

 void manche (S_jou tab[]){
    afaireachaquemanche();
    for (int k=0;k<4;k++){
    for (int i=0;i<4;i++){
        printf("Au joueur %d",i+1);
        do {
            tourjeu(&tab,i);
        }
        while(tab[i].nbaction !=0);
    }
    }
 }
void nbjoueur(S_jou tab[],int n){
    char nom [15];
    for(int i=0;i<n;i++){
    printf("Nom du joueur %d\n",i);
    gets(nom);
    strcpy(tab[i].nom,nom);
    tab[i].casejeu = 16;
    tab[i].roupie = 2;
    tab[i].jetclient = 0;
    tab[i].jetville = 0;
    tab[i].palais[0] = 0;
    tab[i].palais[1] = 0;
    tab[i].palais[2] = 0;
    tab[i].palais[3] = 0;
    tab[i].palais[4] = 0;
    tab[i].palais[5] = 0;
    tab[i].nbaction = 4;
    tab[i].ballot[0] = 0;
    tab[i].ballot[1] = 0;
    }
}



    void remplitabballot (){

        tabballot[0] = 3;
        tabballot[1] = 3;
        tabballot[2] = 3;
        tabballot[3] = 2;
        tabballot[4] = 2;
        tabballot[5] = 2;
        tabballot[6] = 2;
        tabballot[7] = 1;
        tabballot[8] = 1;
        tabballot[9] = 1;
        tabballot[10] = 1;
        tabballot[11] = 1;
        tabballot[12] = 4;
        tabballot[13] = 4;
        tabballot[14] = 4;
        tabballot[15] = 4;
        tabballot[16] = 4;
    }


    int tirage (int *tab){ // programme de tirage aléatoire
        /*
    int i;
    int k = 0;
    nbtirage ++;
        do {
            aleatoire = rand()%17;
        }while(!isvalid(aleatoire));
    tabverif[nbtirage] = aleatoire;
    printf("%d\n", tabverif[nbtirage]);
    */
    int i,nb2,nb;
    nb = 17;
    nb2 = nb;
    for(i=0;i<nb;i++)
    {
        int tmp;
        int index = rand()%nb2;
        tmp = tab[index];
        tab[index] = tab[nb2-1];
        tab[nb-i-1] = tmp;
        nb2--;
    }
}


/*
    int isvalid(int F){ // programme qui vérifie si le nombre aléatoire n'est pas déjà sorti
        int i;
        int o =0;
        for(i=0;i<9;i++){
            if (tabverif[i]== F){
                return 0;
            }
            return 1;
            }
    }



    void inittabverif() { //programme pour initialiser le tableau de verification
    for(int i=0;i<9;i++){
        tabverif[i] =0;
    }
    }

*/
    void inittabballot() { //programme pour initialiser le tableau des ballots
    for(int i=0;i<17;i++){
        tabballot[i] = ' ' ;
    }
    }

    void inittabjeu (){
    for(int i=0;i<24;i++){
        for(int j=0;j<2;j++){
            tabjeu[i][j] = 0;
        }
    }
    }
    void initville () {
        for (int i=0;i<3;i++){
            for(int j=0;j<4;j++){
                demville[i][j] = 0;
            }

        }
    }

    void initvente () {
        for (int i=0;i<12;i++){
            for(int j=0;j<3;j++){
                vente[i][j] = 0;
            }


        }
    }

    void triage (int *tab1){
        int nbj =0;
        int nbb =0;
        int nbv =0;
        int nbo =0;
        for(int i =0;i<9;i++){
            if(tab1[i]==3){
                nbj ++;
            }
            else {
                if(tab1[i]==2){
                    nbv++;
                }
                else {
                    if(tab1[i]==1){
                        nbb++;
                    }
                    else {
                        nbo++;
                    }
                }
            }
        }

        int tabtri[4] = {nbj,nbb,nbo,nbv};
        for(int c=0;c<4;c++){
        printf("%d",tabtri[c]);
        }
        int tabtricoul[4] = {3,1,4,2};
        for(int j=0;j<4;j++){
            printf("\n%d",tabtri[j]);
        }
        tri_a_bulle(tabtri,tabtricoul);
        for(int j=0;j<4;j++){
            printf("\n%d",tabtri[j]);
        }
        range_commerce(tabtri, tabtricoul);
    }

void tri_a_bulle(int*t, int *t2){
    int j =0;
    int tmp =0;
    int trans;
    int en_desordre =1;
    while (en_desordre == 1){
        en_desordre = 0;
        for (j =0; j < 3; j++){
            if(t[j] > t[j+1]){
                tmp = t[j+1];
                trans = t2[j+1];
                t[j+1] = t[j];
                t2[j+1] = t2[j];
                t[j] = tmp;
                t2[j] = trans;
                en_desordre = 1;
            }
        }
    }
}

void range_commerce (int *t,int *tt){
    //couleur la plus présente
    if (t[0] == t[1] == t[2]){
        for (int i =0;i<t[0];i++){
            vente[i][0] = tt[0];
            vente[i+t[0]][0] = tt[1];
            vente[i+2*t[0]][0] = tt[2];
        }
    }
    else {
        if (t[0] == t[1]){
            for (int i =0;i<t[0];i++){
                vente[i][0] = tt[0];
                vente[i+t[0]][0] = tt[1];
            }
        }
        else {
            for (int j =0;j<t[0];j++){
                vente[j][0] = tt[0];
            }
        }
    }
    //2eme couleur la plus présente
    if (t[1] == t[2]){
        for (int k =0;k<t[1];k++){
            vente[k][1] = tt[1];
            vente[k+t[1]][1] = tt[2];
        }
    }

    else {
        if (t[1] == t[2] == t[3]){
            for (int l =0;l<t[1];l++){
                vente[l][1] = tt[1];
                vente[l+t[1]][1] = tt[2];
                vente[l+t[1]+t[1]][1] = tt[3];
            }
        }
        else {
            for (int m =0;m<t[1];m++){
                vente[m][1] = tt[1];
            }
        }
    }
    //3eme couleur laplus présente
    if (t[2] == t[3]){
        for (int n =0;n<t[2];n++){
            vente[n][2] = tt[2];
            vente[n+t[2]][2] = tt[3];
        }
    }
    else {
         for (int o =0;o<t[2];o++){
            vente[o][2] = tt[3];
         }
    }
}

void tribullealeat(int *t, int *t2){
    int j;
    int tmp;
    int trans;
        for (int n =0; n < 3; n++){
            j = n + rand()%(8-n);
            tmp = t[n];
            trans = t2[n];
            t[n] = t[j];
            t2[n] = t2[j];
            t[j] = tmp;
            t2[j] = trans;
        }
    }

void vente_ville (S_jou tab[],int n){
    int x,y,z;
    if (tab[n].casejeu == 5){
        x == 1;
    }
    if (tab[n].casejeu == 7){
        x == 2;
    }
    if (tab[n].casejeu == 8){
        x == 3;
    }
    if (tab[n].casejeu == 19){
        x == 4;
    }
        printf("Il y a \nVente 1 : %d\nVente 2 : %d\nVente 3 : %d",demville[0][x-1],demville[1][x-1],demville[2][x-1]);
        printf("Quel ballot voulez vous vendre ?");
        scanf("%d",y);
        while (atilleballot(demville[y-1][x-1],tab) != 1 ){
            printf("vous n'avez pas le ballot\nEntrez le ballot que vous voulez vendre");
            scanf("%d",y);
        }
        if (y == 1){
            printf("vendu + 4roupies");
            ballotspecial(demville[y-1][x-1]);
            tab[n].roupie + 4;
            z = demville[0][x-1];
            demville[0][x-1] = demville[1][x-1];
            demville[1][x-1] = demville[2][x-1];
            demville[2][x-1] = z;
        }
        else {
            if (y == 2){
                printf("Vendu + 3 roupies");
                ballotspecial(demville[y-1][x-1]);
                tab[n].roupie + 3;
                z = demville[1][x-1];
                demville[1][x-1] = demville[2][x-1];
                demville[2][x-1] = z;
            }
            else {
                printf("Vendu + 1 roupie + 1jeton cliente");
                ballotspecial(demville[y-1][x-1]);
                tab[n].roupie + 1;
                tab[n].jetclient++;
            }
        }
}

void ballotspecial (int x,S_jou tab[], int n){
    if (x == 2){
        printf("Ballot jaune roupie + 1");
        tab[n].roupie++;
    }
    if (x == 1){
        printf("Ballot violet jeton cliente + 1");
        tab[n].jetclient++;
    }
}


void atilleballot (int x,S_jou tab[], int n){
    if (x == tab[n].ballot[0] || x == tab[n].ballot[1]){
        return 1;
    }
    return 0;
}



void inittabdest ()  {
    for (int i=0;i<24;i++){
        for (int j=0;j<8;j++){
            tabdest[i][j] = 0;
        }
    }
}


void remplitabdest (){
    for(int i=0;i<23;i++){
        for(int j=0;j<7;j++){
            tabdest[i][j] = 0;
        }
    }
    // colonne 0 = case présente
    // autres colonnes = la ou on peut aller
    tabdest[0][0] = 1;
    tabdest[0][1] = 2;
    tabdest[0][1] = 3;

    tabdest[1][0] = 2;
    tabdest[1][1] = 1;
    tabdest[1][2] = 3;
    tabdest[1][3] = 5;

    tabdest[2][0] = 3;
    tabdest[2][1] = 1;
    tabdest[2][2] = 2;
    tabdest[2][3] = 6;

    tabdest[3][0] = 4;
    tabdest[3][1] = 7;

    tabdest[4][0] = 5;
    tabdest[4][1] = 2;
    tabdest[4][2] = 10;

    tabdest[5][0] = 6;
    tabdest[5][1] = 3;
    tabdest[5][2] = 11;

    tabdest[6][0] = 7;
    tabdest[6][1] = 4;
    tabdest[6][2] = 12;

    tabdest[7][0] = 8;
    tabdest[7][1] = 9;
    tabdest[7][2] = 13;

    tabdest[8][0] = 9;
    tabdest[8][1] = 8;

    tabdest[9][0] = 10;
    tabdest[9][1] = 5;
    tabdest[9][2] = 11;
    tabdest[9][3] = 20;

    tabdest[10][0] = 11;
    tabdest[10][1] = 6;
    tabdest[10][2] = 10;
    tabdest[10][3] = 20;
    tabdest[10][4] = 16;
    tabdest[10][5] = 12;

    tabdest[11][0] = 12;
    tabdest[11][1] = 11;
    tabdest[11][2] = 16;
    tabdest[11][3] = 13;
    tabdest[11][4] = 7;

    tabdest[12][0] = 13;
    tabdest[12][1] = 12;
    tabdest[12][2] = 16;
    tabdest[12][3] = 8;
    tabdest[12][4] = 14;
    tabdest[12][5] = 17;

    tabdest[13][0] = 14;
    tabdest[13][1] = 13;
    tabdest[13][2] = 17;
    tabdest[13][3] = 18;
    tabdest[13][4] = 15;

    tabdest[14][0] = 15;
    tabdest[14][1] = 14;
    tabdest[14][2] = 18;
    tabdest[14][3] = 19;

    tabdest[15][0] = 16;
    tabdest[15][1] = 11;
    tabdest[15][2] = 20;
    tabdest[15][3] = 21;
    tabdest[15][4] = 22;
    tabdest[15][5] = 17;
    tabdest[15][6] = 13;
    tabdest[15][7] = 12;

    tabdest[16][0] = 17;
    tabdest[16][1] = 16;
    tabdest[16][2] = 22;
    tabdest[16][3] = 13;
    tabdest[16][4] = 23;
    tabdest[16][5] = 18;
    tabdest[16][6] = 14;

    tabdest[17][0] = 18;
    tabdest[17][1] = 14;
    tabdest[17][2] = 17;
    tabdest[17][3] = 23;
    tabdest[17][4] = 24;
    tabdest[17][5] = 19;
    tabdest[17][6] = 15;

    tabdest[18][0] = 19;
    tabdest[18][1] = 15;
    tabdest[18][2] = 18;
    tabdest[18][3] = 24;

    tabdest[19][0] = 20;
    tabdest[19][1] = 10;
    tabdest[19][2] = 11;
    tabdest[19][3] = 16;
    tabdest[19][4] = 21;

    tabdest[20][0] = 21;
    tabdest[20][1] = 20;
    tabdest[20][2] = 16;
    tabdest[20][3] = 22;

    tabdest[21][0] = 22;
    tabdest[21][1] = 21;
    tabdest[21][2] = 16;
    tabdest[21][3] = 17;

    tabdest[22][0] = 23;
    tabdest[22][1] = 17;
    tabdest[22][2] = 18;
    tabdest[22][3] = 24;

    tabdest[23][0] = 24;
    tabdest[23][1] = 23;
    tabdest[23][2] = 18;
    tabdest[23][3] = 19;

}

void oualler (S_jou tab[], int n){
    int d, test;
    test = 1;
    printf("Vous etes à la case %d\n",tab[n].casejeu);
    printf("Vous pouvez aller a la case %d\n",tabdest[tab[n].casejeu][0]);
    int i =1;
    do {
        printf("Vous pouvez aller a la case %d\n",tabdest[tab[n].casejeu][i]);
        i++;
    }
    while (tabdest[tab[n].casejeu][i] != 0);


    do {
        printf("Ou voulez vous aller ?\n");
        scanf("%d",d);
        if (d == tabdest[tab[n].casejeu][0] ||d == tabdest[tab[n].casejeu][1]||d == tabdest[tab[n].casejeu][2]||d == tabdest[tab[n].casejeu][3]||d == tabdest[tab[n].casejeu][4]
            ||d == tabdest[tab[n].casejeu][5]||d == tabdest[tab[n].casejeu][6]||d == tabdest[tab[n].casejeu][7]) {
                tab[n].casejeu = d;
                if(d == 16 || d == 18){
                    tab[n].nbaction-2;
                }
                else {
                    tab[n].nbaction-1;
                }

                printf("Vous êtes à la case %d\n",d);
                for (int k=0;k<4;k++){
                    for (int l=0;l<6;l++){
                        if (tab[k].palais[l] == tab[n].casejeu){
                            printf("Vous êtes passé par un palais +1 roupie au constructeur");
                            tab[k].roupie++;
                        }
                    }
                }
            }
        else {
            printf("Vous ne pouvez pas aller la bas");
        }
        printf("Voules vous encore vous déplacer ?(1=oui,0=non)");
        scanf("%d",test);
    }
    while (test == 1 || tab[n].nbaction !=0);
}


void tourjeu (S_jou tab[], int n){
    int x;
    if (tab[n].casejeu == 5 ||tab[n].casejeu == 7 ||tab[n].casejeu == 8 ||tab[n].casejeu == 19){
        printf("Vous etes dans une ville voulez vous vendre ? (1 : oui, 2 : non)\n");
        scanf("%d",x);
        if (x == 1){
            vente_ville(&tab,n);
        }
    }
    if (tab[n].casejeu == 1 ||tab[n].casejeu == 6 ||tab[n].casejeu == 4 ||tab[n].casejeu == 9 ||
        tab[n].casejeu == 14 ||tab[n].casejeu == 20 ||tab[n].casejeu == 22 ||tab[n].casejeu == 23){
            printf("Vous etes dans une comptoir voulez vous acheter ? (1 : oui, 2 : non)\n");
        scanf("%d",x);
            if (x == 1){
                achat_compt(&tab,n);
            }
        }
    if(tab[n].casejeu == 2 ||tab[n].casejeu == 3 ||tab[n].casejeu == 10 ||tab[n].casejeu == 11 ||
        tab[n].casejeu == 21 ||tab[n].casejeu == 17 ||tab[n].casejeu == 24 ||tab[n].casejeu == 15 ||tab[n].casejeu == 12 ||tab[n].casejeu == 13){
            printf("Vous etes dans une case vide voulez vous construire un palais ? (1 : oui, 2 : non)\n");
            scanf("%d",x);
            if (x == 1){
                construc_palais(&tab,n);
            }
        }
    else {
        printf("voulez vous vous deplacer ? (1=oui, 0=non)\n");
        scanf("%d",x);
        if (x == 1){
            oualler(&tab,n);
        }

    }

}

int construc_palais (S_jou tab[], int n){
    int x,y,c=0,test =0;
    if(tabjeu[1][tab[n].casejeu] == 0){
        printf("Il y a deja un palais\n");
        return 0;
    }
    else {
        if (tab[n].nbaction<1 || tab[n].ballot[0] == 0 || tab[n].ballot[1] == 0){
            printf("pas assez de roupies/ballot !\n");
            return 0;
        }
        else {
            tab[n].nbaction-1;
            printf("Quel ballot voulez vous utiliser pour construire ?");
            printf("1. %d",tab[n].ballot[0]);
            printf("2. %d",tab[n].ballot[1]);
            scanf("%d",x);
            if (x == 0){
                printf("Ca ce n'est pas un ballot");
            }
            tab[n].ballot[x-1] = 0;
            if (tabjeu[1][tab[n].casejeu] == 5){
                tab[n].jetville++;
            }
            if (tabjeu[1][tab[n].casejeu] == 6){
                tab[n].jetclient++;
            }
            if (tabjeu[1][tab[n].casejeu] == 7){
                tab[n].roupie +2;
            }
            if (tabjeu[1][tab[n].casejeu] == 8){
                printf("Vous avez gagné un ballot, lequel voulez vous");
                for (int i=0;i<7;i++){
                    printf("Il y a %d.  %d\n",i,vente[3][i]);
                }
                scanf("%d",y);
                if(tab[n].ballot[0] == 0){
                    tab[n].ballot[0] == vente[3][y];
                }
                if(tab[n].ballot[1] == 0){
                    tab[n].ballot[1] == vente[3][y];
                }
            }
            tabjeu[1][tab[n].casejeu] = 0;
            do {
                if (tab[n].palais[c] == 0){
                    test =1;
                    tab[n].palais[c] == tab[n].casejeu;
                }
                else {
                    test =0;
                }
                c++;
            }
            while (test !=1);
        }
    }
}


int achat_compt (S_jou tab[], int n){
    int y,nbact,nbroupie;
    int i=0,x=0,test=0;
    do {
        for(int a=0;a<12;a++){
            if (vente[a][0] == tabjeu[1][tab[n].casejeu]){
                test = 1;
            }
        }
        for(int a=0;a<12;a++){
            if (vente[a][1] == tabjeu[1][tab[n].casejeu]){
                test = 2;
            }
        }
        for(int a=0;a<12;a++){
            if (vente[a][2] == tabjeu[1][tab[n].casejeu]){
                test = 3;
            }
        }
    }while(test == 0);

    while (peutacheter(test,tab,n) != 1){
        printf("pas assez de point d'action et/ou roupies");
        return 0;
    }
    printf("Vous avez acheter un ballot");
    if (tab[n].ballot[0] == 0){
        tab[n].ballot[0] = tabjeu[1][tab[n].casejeu];
        if (test == 1){
        tab[n].roupie -2;
        tab[n].nbaction -2;
        }
    if (test == 2){
        tab[n].roupie -2;
        tab[n].nbaction -1;
    }
    if (test == 3){
        tab[n].roupie -1;
        tab[n].nbaction -1;
    }
}
    else {
        if (tab[n].ballot[1] == 0){
            tab[n].ballot[1] == tabjeu[1][tab[n].casejeu];
            if (test == 1){
        tab[n].roupie -2;
        tab[n].nbaction -2;
        }
    if (test == 2){
        tab[n].roupie -2;
        tab[n].nbaction -1;
    }
    if (test == 3){
        tab[n].roupie -1;
        tab[n].nbaction -1;
    }
        else {
            printf("erreur plus de place !");
            return 0;
            //sous prog pour reommencer tour de jeu
        }
    }
}
}


int peutacheter (int x,S_jou tab[], int n){
    if (x == 1){
        if (tab[n].roupie<2 || tab[n].nbaction<2){
            return 0;
        }
        else {
            return 1;
        }
    }
    if (x == 2){
        if (tab[n].roupie<1 || tab[n].nbaction<2){
            return 0;
        }
        else {
            return 1;
        }
    }
    if (x == 3){
        if (tab[n].roupie<1 || tab[n].nbaction<1){
            return 0;
        }
        else {
            return 1;
        }
    }
}

void mise_en_place () {
    tabjeu[1][1] = tabcompt[0];
    tabjeu[1][6] = tabcompt[1];
    tabjeu[1][20] = tabcompt[2];
    tabjeu[1][4] = tabcompt[3];
    tabjeu[1][22] = tabcompt[4];
    tabjeu[1][9] = tabcompt[5];
    tabjeu[1][14] = tabcompt[6];
    tabjeu[1][23] = tabcompt[7];

    tabjeu[1][2] = tabpalais[0];
    tabjeu[1][3] = tabpalais[1];
    tabjeu[1][10] = tabpalais[2];
    tabjeu[1][11] = tabpalais[3];
    tabjeu[1][21] = tabpalais[4];
    tabjeu[1][17] = tabpalais[5];
    tabjeu[1][24] = tabpalais[6];
    tabjeu[1][15] = tabpalais[7];
}

void tirage1(){

    int nb1=0, nb2=0, nb3=0, nb4=0;

    while (nb1==nb2 || nb1==nb3 || nb1==nb4 || nb2==nb3 || nb2==nb4 || nb3==nb4){
    nb1=rand()%4+1; //affectation nombre entre 1 et 4 à la variable
    nb2=rand()%4+1;
    nb3=rand()%4+1;
    nb4=rand()%4+1;
    }
    printf("\n\n\n nb aleatoire : %d %d %d %d \n\n\n",nb1,nb2,nb3,nb4); //verification visuelle
    affectation(nb1, nb2, nb3, nb4); //SP pour affecter colonne couleur balo aux 4 villes de facon aléatoire
    }

void affectation (int nb1, int nb2, int nb3, int nb4){

    for (int i=0; i<3 ;i++){
            sto[i][0]=demville[i][nb1-1];
    }
            for (int i=0;i<3;i++){
                demville[i][nb1-1]=demville[i][nb2-1];
                demville[i][nb2-1]=demville[i][nb3-1];
                demville[i][nb3-1]=demville[i][nb4-1];
            }
    for (int i=0; i<3 ;i++){
            demville[i][nb4-1]=sto[i][0];

    }
    for (int i=0;i<4;i++){
        printf("\n Demande ville %d",i+1);
            for (int j=0;j<3;j++){
            printf("\n %d ", demville[j][i]);
            }
    }
}

void affichage_carte () {

printf ("\n     +----------------------------------------------------------------carte de jeu------------------------------------------------------------------+");
printf ("\n     |                                                                                                                                              |");
printf ("\n     |                ++++++01++++++                     ++++++04++++++         ++++++09++++++                                                      |");
printf ("\n     |                +%d joueur(s) +                     +%d joueur(s) +         +%d joueur(s) +                                                      |",tabjeu[0][1],tabjeu[0][4],tabjeu[0][9]);
printf ("\n     |                +compt -%d-   +                     +compt -%d-   +         +compt -%d-   +                                                      |",tabjeu[1][1],tabjeu[1][4],tabjeu[1][9]);
printf ("\n     |                ++++++++++++++                     ++++++++++++++         ++++++++++++++                                                      |");
printf ("\n     |                 /          \\                            |                      |                                                             |");
printf ("\n     |                /            \\                           |                      |                                                             |");
printf ("\n     |               /              \\                          |                      |                                                             |");
printf ("\n     |              /                \\                         |                      |                                                             |");
printf ("\n     |      ++++++02++++++        ++++++03++++++         ++++++07++++++         ++++++08++++++                                                      |");
printf ("\n     |      +%d joueur(s) +        +%d joueur(s) +         +%d joueur(s) +         +%d joueur(s) +                                                      |",tabjeu[0][2],tabjeu[0][3]);
printf ("\n     |      +jeton -%d-   +        +jeton -%d-   +         +ville verte +         +ville bleue +                                                      |",tabjeu[1][2],tabjeu[1][3]);
printf ("\n     |      ++++++++++++++        ++++++++++++++         ++++++++++++++         ++++++++++++++                                                      |");
printf ("\n     |            |                     |                      |                     |                                                              |");
printf ("\n     |            |                     |                      |                     |                                                              |");
printf ("\n     |            |                     |                      |                     |                                                              |");
printf ("\n     |            |                     |                      |                     |                                                              |");
printf ("\n     |      ++++++05++++++        ++++++06++++++         ++++++12++++++        ++++++13++++++        ++++++14++++++         ++++++15++++++          |");
printf ("\n     |      +%d joueur(s) +        +%d joueur(s)+          +%d joueur(s) +        +%d joueur(s) +        +%d joueur(s)+          +%d joueur(s)+           |",tabjeu[0][6],tabjeu[0][14],tabjeu[0][15]);
printf ("\n     |      +ville rouge +        +compt -%d-   +         +case vide   +        +case vide   +        +compt -%d-   +         +jeton -%d-   +          |",tabjeu[1][6],tabjeu[1][14],tabjeu[1][15]);
printf ("\n     |      ++++++++++++++        ++++++++++++++         ++++++++++++++        ++++++++++++++        ++++++++++++++         ++++++++++++++          |");
printf ("\n     |            |                     |                /     |               /     |               /     |                      |                 |");
printf ("\n     |            |                     |               /      |              /      |              /      |                      |                 |");
printf ("\n     |            |                     |              /       |             /       |             /       |                      |                 |");
printf ("\n     |            |                     |             /        |            /        |            /        |                      |                 |");
printf ("\n     |            |                     |            /         |           /         |           /         |                      |                 |");
printf ("\n     |            |                     |           /          |          /          |          /          |                      |                 |");
printf ("\n     |            |                     |          /           |         /           |         /           |                      |                 |");
printf ("\n     |            |                     |         /            |        /            |        /            |                      |                 |");
printf ("\n     |            |                     |        /             |       /             |       /             |                      |                 |");
printf ("\n     |            |                     |       /              |      /              |      /              |                      |                 |");
printf ("\n     |      ++++++10++++++        ++++++11++++++         ++++++16++++++        ++++++17++++++        ++++++18++++++         ++++++19++++++          |");
printf ("\n     |      +%d joueur(s) +        +%d joueur(s) +         +%d joueur(s) +        +%d joueur(s)+         +%d joueur(s) +         +%d joueur(s) +          |",tabjeu[0][10],tabjeu[0][11],tabjeu[0][17]);
printf ("\n     |      +jeton -%d-   +        +jeton -%d-   +         +colline     +        +jeton -%d-   +        +colline     +         +ville grise +          |",tabjeu[1][10],tabjeu[1][11],tabjeu[1][17]);
printf ("\n     |      ++++++++++++++        ++++++++++++++         ++++++++++++++        ++++++++++++++        ++++++++++++++         ++++++++++++++          |");
printf ("\n     |                   \\               |              /      |       \\             |       \\             |                      |                 |");
printf ("\n     |                    \\              |             /       |        \\            |        \\            |                      |                 |");
printf ("\n     |                     \\             |            /        |         \\           |         \\           |                      |                 |");
printf ("\n     |                      \\            |           /         |          \\          |          \\          |                      |                 |");
printf ("\n     |                       \\           |          /          |           \\         |           \\         |                      |                 |");
printf ("\n     |                        \\          |         /           |            \\        |            \\        |                      |                 |");
printf ("\n     |                         \\         |        /            |             \\       |             \\       |                      |                 |");
printf ("\n     |                          \\        |       /             |              \\      |              \\      |                      |                 |");
printf ("\n     |                           \\       |      /              |               \\     |               \\     |                      |                 |");
printf ("\n     |                            ++++++20++++++         ++++++21++++++        ++++++22++++++        ++++++23++++++        ++++++24++++++           |");
printf ("\n     |                            +%d joueur(s) +         +%d joueur(s) +        +%d joueur(s) +        +%d joueur(s) +        +%d joueur(s) +           |",tabjeu[0][20],tabjeu[0][21],tabjeu[0][22],tabjeu[0][23],tabjeu[0][24]);
printf ("\n     |                            +compt -%d-   +         +jeton -%d-   +        +compt -%d-   +        +compt -%d-   +        +jeton -%d-   +           |",tabjeu[1][20],tabjeu[1][21],tabjeu[1][22],tabjeu[1][23],tabjeu[1][24]);
printf ("\n     |                            ++++++++++++++         ++++++++++++++        ++++++++++++++        ++++++++++++++        ++++++++++++++           |");
printf ("\n     |                                                                                                                                              |");
printf ("\n     |                                                                                                                                              |");
printf ("\n     |                                                                                                                                              |");
printf ("\n     +--------------------------------------------------------------------Bombay--------------------------------------------------------------------+");
printf ("\n\n\n\n");
}

void affdemande_ville (){
    printf("\n+---+---+---+---+");
    printf("\n|Vr |Vv |Vb |Vg |");
    printf("\n+---+---+---+---+");
    printf("\n| %d | %d | %d | %d |",demville[0][0],demville[0][1],demville[0][2],demville[0][3]);
    printf("\n+---+---+---+---+");
    printf("\n| %d | %d | %d | %d |",demville[1][0],demville[1][1],demville[1][2],demville[1][3]);
    printf("\n+---+---+---+---+");
    printf("\n| %d | %d | %d | %d |",demville[2][0],demville[2][1],demville[2][2],demville[2][3]);
    printf("\n+---+---+---+---+");

}

void affcompt () {
    printf("\n+---+---+---+");
    printf("\n|C1 |C2 |C3 |");
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[0][0],vente[0][1],vente[0][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[1][0],vente[1][1],vente[1][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[2][0],vente[2][1],vente[2][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[3][0],vente[3][1],vente[3][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[4][0],vente[4][1],vente[4][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[5][0],vente[5][1],vente[5][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[6][0],vente[6][1],vente[6][2]);
    printf("\n+---+---+---+");
    printf("\n| %d | %d | %d |",vente[7][0],vente[7][1],vente[7][2]);
    printf("\n+---+---+---+");
}



















